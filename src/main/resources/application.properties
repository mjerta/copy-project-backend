#Could be use to change the port number
#server.port=9000
# The name of the Spring Boot application.
spring.application.name=${APPLICATION_NAME}
# Specifies the SQL initialization platform to use. In this case, PostgreSQL.
spring.sql.init.platform=postgres
# URL of the PostgreSQL database to connect to.
spring.datasource.url=jdbc:postgresql://${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}
# Username for accessing the PostgreSQL database.
spring.datasource.username=${POSTGRES_USERNAME}
# Password for the PostgreSQL database user.
spring.datasource.password=${POSTGRES_PASSWORD}
# Specifies the Hibernate dialect to use for PostgreSQL. It helps Hibernate generate appropriate SQL for PostgreSQL.
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
# Configures Hibernate's schema management strategy.
# 'update' will update the schema without dropping existing tables.
# Create the scheme and destroy previous data
spring.jpa.hibernate.ddl-auto=create
# Specifies when the SQL initialization scripts are run.
# 'always' means scripts are run every time the application starts.
# Is usefull when you want to insert data with data.sql or add a scheme for initial startup with schema.sql
spring.sql.init.mode=always
# Ensures that the DataSource is initialized before Hibernate tries to use it.
spring.jpa.defer-datasource-initialization=true
# Ensures that unknown properties will result in an exception per model you can turn it it on with the following annotation //@JsonIgnoreProperties(ignoreUnknown = false)
# this is a default setting
spring.jackson.deserialization.fail-on-unknown-properties=true

# Needed for debug purposes
# Enables logging of SQL statements generated by Hibernate.
spring.jpa.show-sql=true
logging.level.org.springframework.security=DEBUG
#debug=true

app.default.password=${ADMIN_PASSWORD}
app.default.username=${SUPERUSER}

